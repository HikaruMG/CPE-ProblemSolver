โค้ดนี้เป็นโปรแกรมที่ใช้ในการคำนวณจำนวนกระโดดขั้นต่ำที่ต้องการเพื่อไปถึงจุดสุดท้ายจากจุดเริ่มต้น โดยมีข้อจำกัดว่าในแต่ละกระโดดสามารถกระโดดได้แค่ระยะทางสูงสุดที่กำหนด และการเชื่อมต่อระหว่างจุดกระโดดจะเกิดขึ้นหากระยะห่างระหว่างจุดกระโดดสองจุดนั้นไม่เกินระยะทางที่กำหนด

การทำงานของโค้ด:
โครงสร้าง jumppoint:

ใช้ในการเก็บข้อมูลของแต่ละจุดกระโดด ซึ่งมีพิกัด x และ y (พิกัดในระนาบ 2 มิติ)
ฟังก์ชัน dist:

คำนวณระยะห่างระหว่างสองจุดกระโดด โดยใช้สูตรระยะทาง Euclidean (แต่ไม่ต้องหาค่ารากที่สอง) เพื่อเปรียบเทียบระยะทางระหว่างจุดกระโดดทั้งสอง
คำนวณเป็นค่ากำลังสองเพื่อหลีกเลี่ยงการใช้การคำนวณที่ต้องหาค่าราก (ซึ่งอาจทำให้ช้ากว่า)
ฟังก์ชัน minjump:

คำนวณจำนวนกระโดดขั้นต่ำที่ต้องใช้ในการไปถึงจุดสุดท้ายจากจุดเริ่มต้น
สร้างกราฟที่มีจุดกระโดดเป็นโหนด และเชื่อมโยงโหนดสองตัวหากระยะห่างระหว่างจุดทั้งสองไม่เกินระยะทางสูงสุดที่กำหนด (k).
ใช้การค้นหาแบบ BFS (Breadth-First Search) เพื่อหาจำนวนกระโดดที่น้อยที่สุดจากจุดเริ่มต้น (index 0) ไปยังจุดสุดท้าย (index n-1)
การเชื่อมโยงจุดกระโดด:

สำหรับทุกคู่ของจุดกระโดด, คำนวณระยะห่างระหว่างกัน ถ้าระยะห่างไม่เกิน k, เชื่อมโยงทั้งสองจุดในกราฟ
กราฟนี้จะใช้เป็นแผนที่ในการค้นหาเส้นทางที่เร็วที่สุดจากจุดเริ่มต้นไปยังจุดสุดท้าย
การใช้ BFS:

ใช้ BFS เพื่อหาจำนวนกระโดดที่น้อยที่สุด โดยเริ่มจากจุดเริ่มต้น (index 0) และค้นหาทุกๆ จุดที่สามารถไปถึงได้ภายในระยะทางที่กำหนด
ถ้าค้นพบจุดสุดท้าย (index n-1), จะคืนค่าจำนวนกระโดดที่ใช้ในการไปถึงจุดนั้น
ถ้าไม่สามารถไปถึงจุดสุดท้ายได้ จะคืนค่า -1 แทน
ฟังก์ชัน main:

อ่านค่าจำนวนจุดกระโดด (n) และระยะทางกระโดดสูงสุด (k) จากอินพุต
อ่านพิกัดของจุดกระโดดแต่ละจุด
เพิ่มจุดเริ่มต้นที่ (0, 0) และจุดสุดท้ายที่ (100, 100) ลงในลิสต์ของจุดกระโดด
ถ้าระยะทางกระโดดสูงสุด k เป็น 0, ไม่สามารถกระโดดได้ จึงคืนค่า -1
เรียกใช้ฟังก์ชัน minjump เพื่อคำนวณจำนวนกระโดดที่ต้องการ
แสดงผลลัพธ์
ตัวอย่างการทำงาน:
สมมุติว่าเราให้จำนวนจุดกระโดด n = 3 และระยะทางกระโดดสูงสุด k = 5 โดยพิกัดของจุดกระโดดคือ:

คัดลอก
แก้ไข
1 2
3 4
5 6
หลังจากเพิ่มจุดเริ่มต้น (0, 0) และจุดสุดท้าย (100, 100) เข้าไปในลิสต์ของจุดกระโดด, โปรแกรมจะสร้างกราฟและใช้ BFS ในการค้นหาจำนวนกระโดดขั้นต่ำจากจุดเริ่มต้นไปยังจุดสุดท้าย

ข้อสังเกต:
การคำนวณระยะทางระหว่างจุดใช้สูตร dist ที่คำนวณเป็นกำลังสองของระยะทาง Euclidean เพื่อลดการคำนวณที่ซับซ้อน
ฟังก์ชัน minjump ใช้ BFS ในการค้นหาเส้นทางที่เร็วที่สุดจากจุดเริ่มต้นไปยังจุดสุดท้าย
การเพิ่มจุดเริ่มต้น (0, 0) และจุดสุดท้าย (100, 100) ในลิสต์ช่วยให้โปรแกรมสามารถทำงานได้ถูกต้องในกรณีทั่วไป
ตัวอย่างอินพุตและผลลัพธ์:
อินพุต:

คัดลอก
แก้ไข
3 5
1 2
3 4
5 6
ผลลัพธ์:

คัดลอก
แก้ไข
2
หมายเหตุ: ผลลัพธ์นี้เป็นจำนวนกระโดดขั้นต่ำที่ต้องการจากจุดเริ่มต้นไปยังจุดสุดท้ายในกรณีนี้