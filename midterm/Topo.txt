โค้ดนี้ทำการคำนวณ Topological Sort (การเรียงลำดับทางทฤษฎี) บนกราฟที่เป็น Directed Acyclic Graph (DAG) (กราฟที่ไม่มีวงจร) โดยใช้เทคนิค Kahn's Algorithm ซึ่งใช้การนับจำนวนการเชื่อมโยงเข้า (in-degree) ของแต่ละโหนดในกราฟและใช้ queue ในการจัดการกับโหนดที่ไม่มีการเชื่อมโยงเข้า.

ขั้นตอนและอธิบายการทำงานของโค้ด:
รับข้อมูล:

รับจำนวนโหนด (n) และจำนวนขอบ (m) จากอินพุต
รับข้อมูลขอบที่เชื่อมโยงระหว่างโหนด (เป็นคู่ของโหนด u และ v ซึ่งแสดงว่ามีขอบจาก u ไปยัง v)
สร้าง Adjacency List:

สร้าง adjacency list ซึ่งเป็นเวกเตอร์ของเวกเตอร์ที่ใช้เก็บขอบของกราฟ
สร้าง in-degree array เพื่อเก็บจำนวนการเชื่อมโยงเข้า (degree) ของแต่ละโหนด
เพิ่มขอบในกราฟ:

สำหรับแต่ละขอบที่ให้มาในข้อมูล จะเพิ่มโหนดปลายทาง (v) ไปใน adjacency list ของโหนดต้นทาง (u) และเพิ่มค่าใน-degree ของโหนด v ขึ้น 1
ใช้ Queue สำหรับการจัดการ Topological Sort:

สร้าง queue เพื่อเก็บโหนดที่ไม่มีการเชื่อมโยงเข้า (in-degree = 0)
เริ่มต้นโดยการเพิ่มโหนดที่มี in-degree เป็น 0 ลงใน queue
ประมวลผล Topological Sort:

ในขณะที่ queue ยังไม่ว่าง:
ดึงโหนดจาก queue ออกมาและเพิ่มลงในผลลัพธ์
ลดค่า in-degree ของโหนดที่เชื่อมโยงกับโหนดปัจจุบัน (neighbor)
หากโหนด neighbor มี in-degree เป็น 0 หลังจากลดค่าแล้ว ให้เพิ่มโหนดนั้นลงใน queue
ตรวจสอบวงจรในกราฟ:

หากขนาดของผลลัพธ์ (res) ไม่เท่ากับจำนวนโหนดทั้งหมด (n), แสดงว่าไม่สามารถทำ topological sort ได้เนื่องจากกราฟมีวงจร
ถ้าไม่มีวงจร จะแสดงผลลัพธ์เป็นลำดับของโหนดที่ได้จาก topological sort
ผลลัพธ์:

หากกราฟมีวงจร, พิมพ์ "no"
หากไม่มีก็พิมพ์ลำดับของโหนดใน topological order
ตัวอย่างการทำงาน:
Input:

คัดลอก
แก้ไข
6 6
1 2
1 3
2 4
3 4
4 5
5 6
Explanation:

จำนวนโหนด: 6
จำนวนขอบ: 6
ขอบ: 1 → 2, 1 → 3, 2 → 4, 3 → 4, 4 → 5, 5 → 6
Output:

คัดลอก
แก้ไข
1
2
3
4
5
6

สรุป:
โค้ดนี้ใช้ Kahn's Algorithm สำหรับการทำ Topological Sort ในกราฟที่ไม่มีวงจร (DAG).
ถ้ากราฟมีวงจร (ไม่สามารถทำ topological sort ได้), โค้ดจะแสดง "no".
ถ้ากราฟไม่มีวงจร, โค้ดจะแสดงลำดับของโหนดใน topological order.