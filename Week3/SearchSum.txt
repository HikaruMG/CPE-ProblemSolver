หลักการคิดและการทำงานของโค้ดนี้สามารถอธิบายได้ดังนี้:

1. การคำนวณ Prefix Sum (ผลรวมสะสม)
การคำนวณ prefix sum คือการคำนวณผลรวมของข้อมูลตั้งแต่ต้นจนถึงตำแหน่งที่ต้องการ ซึ่งจะช่วยให้เราสามารถหาผลรวมของช่วงที่ต้องการได้โดยไม่ต้องคำนวณใหม่ทุกครั้งที่มีการถามคำถามในช่วงนั้น

โดยในที่นี้เรามีราคาของการ์ตูนแต่ละเล่ม, และเราต้องการหาผลรวมของราคาการ์ตูนตั้งแต่เล่มที่ 1 ถึงเล่มที่ i เพื่อที่จะตอบคำถามว่าเราสามารถซื้อการ์ตูนกี่เล่มได้โดยไม่เกินจำนวนเงินที่มี
ใช้ prefix sum เพื่อคำนวณผลรวมของราคาการ์ตูนจากเล่ม 1 ถึงเล่ม i และเก็บค่าผลรวมไว้ในอาเรย์ prefixSum

ตัวอย่าง:
ถ้าราคาการ์ตูนเป็น [10, 20, 30]
ผลรวมสะสมจะเป็น [0, 10, 30, 60] ซึ่งหมายความว่า:
เล่มที่ 1: ราคา 10 บาท
เล่มที่ 2: ราคา 10 + 20 = 30 บาท
เล่มที่ 3: ราคา 10 + 20 + 30 = 60 บาท

2. การใช้ Binary Search เพื่อหาจำนวนเล่มที่สามารถซื้อได้
เมื่อเรามีข้อมูล prefix sum แล้ว เราจะใช้ binary search ในการหาจำนวนเล่มสูงสุดที่สามารถซื้อได้โดยไม่เกินจำนวนเงินที่เรามี สำหรับแต่ละคำถาม:

เมื่อเรามีจำนวนเงิน m ที่ต้องการใช้ซื้อการ์ตูน, เราจะทำการค้นหาค่าที่มากที่สุดจากอาเรย์ prefixSum ที่น้อยกว่าหรือเท่ากับ m (การใช้ binary search ช่วยให้สามารถค้นหาคำตอบได้ในเวลาที่เร็วมาก)
สาเหตุที่เลือกใช้ binary search คือเนื่องจากอาเรย์ prefixSum เป็นอาเรย์ที่เรียงลำดับจากน้อยไปมาก การใช้ binary search จะช่วยให้เราค้นหาคำตอบได้ในเวลาที่มีประสิทธิภาพมาก (O(log n))

ขั้นตอนการใช้ binary search:
- กำหนดช่วงค้นหาจาก left = 0 และ right = n
- คำนวณ mid = (left + right) / 2
- ถ้า prefixSum[mid] <= m แสดงว่าเราสามารถซื้อได้จนถึงเล่มที่ mid ดังนั้นเราจะอัพเดต left = mid + 1 เพื่อขยายช่วงการค้นหาด้านขวา
- ถ้า prefixSum[mid] > m แสดงว่าเราต้องลดช่วงการค้นหาด้านซ้าย โดยอัพเดต right = mid - 1
- ทำซ้ำจนกว่าช่วงค้นหาจะหมด ซึ่งจะได้จำนวนเล่มสูงสุดที่สามารถซื้อได้

3. การตอบคำถาม
หลังจากที่ใช้ binary search เพื่อหาจำนวนเล่มที่สามารถซื้อได้ เราจะพิมพ์คำตอบออกมา
ในแต่ละคำถามที่เราถามเกี่ยวกับจำนวนเงินที่เรามี m, เราจะตอบได้โดยใช้ผลลัพธ์จากการค้นหา binary search ใน prefixSum

4. การทำงานของโค้ด
ขั้นตอนการทำงาน:
รับข้อมูล:
- อ่านจำนวนการ์ตูน n และจำนวนคำถาม k
- อ่านราคาการ์ตูนแต่ละเล่มและเก็บไว้ในอาเรย์ prices

คำนวณ Prefix Sum:
- สร้างอาเรย์ prefixSum เพื่อเก็บผลรวมของราคาการ์ตูนจากเล่มที่ 1 ถึงเล่มที่ i
- prefixSum[i] = prefixSum[i-1] + prices[i]

ตอบคำถาม:
- สำหรับแต่ละคำถาม อ่านจำนวนเงิน m
- ใช้ binary search ใน prefixSum เพื่อหาจำนวนเล่มที่ซื้อได้โดยไม่เกินจำนวนเงิน m
- พิมพ์คำตอบ

5. ประสิทธิภาพ
การคำนวณ prefix sum ใช้เวลา O(n) เนื่องจากต้องคำนวณผลรวมสะสมทีละตัว
การตอบคำถามแต่ละคำถามใช้เวลา O(log n) เนื่องจากใช้ binary search ในการค้นหาคำตอบจาก prefixSum
ดังนั้นเวลาที่ใช้ในการแก้ไขปัญหาทั้งหมดจะเป็น O(n + k log n) ซึ่งมีประสิทธิภาพสูงเมื่อเทียบกับข้อจำกัดของโจทย์ (สูงสุดที่ n และ k เท่ากับ 100,000)

ตัวอย่าง:
Input:
3 3
10
20
30
15
30
7

ขั้นตอนการทำงาน:
คำนวณ prefixSum:
[0, 10, 30, 60]

สำหรับคำถามแรก (m = 15):
ใช้ binary search หาค่ามากที่สุดที่ไม่เกิน 15 ใน prefixSum, ตอบ 1 เล่ม (เพราะ 10 <= 15)

สำหรับคำถามที่สอง (m = 30):
ใช้ binary search หาค่ามากที่สุดที่ไม่เกิน 30 ใน prefixSum, ตอบ 2 เล่ม (เพราะ 30 <= 30)

สำหรับคำถามที่สาม (m = 7):
ใช้ binary search หาค่ามากที่สุดที่ไม่เกิน 7 ใน prefixSum, ตอบ 0 เล่ม (เพราะ 7 < 10)

Output:
1
2
0