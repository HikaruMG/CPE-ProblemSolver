หลักการคิดและการทำงานของโค้ดนี้สามารถอธิบายได้ดังนี้:

1. การเก็บข้อมูลและติดตามการกด Like
โปรแกรมต้องรับข้อมูลการกด Like สำหรับแต่ละ status ที่มีการกด โดยข้อมูลจะถูกเก็บในโครงสร้างข้อมูล unordered_map ซึ่งเป็นคอนเทนเนอร์ประเภทหนึ่งที่เก็บคู่ค่า (key-value pairs) ซึ่งในที่นี้:

key คือหมายเลข status
value คือจำนวนการกด Like ที่เกิดขึ้นสำหรับ status นั้น
2. การติดตาม status ที่มีจำนวน Like มากที่สุด
เมื่อโปรแกรมได้รับข้อมูลการกด Like ทีละอัน จะต้องมีการตรวจสอบว่า status นั้นๆ มีจำนวน Like ที่มากที่สุดหรือไม่ โดย:

ใช้ตัวแปร max_likes เพื่อติดตามจำนวน Like สูงสุดที่ได้
ใช้ตัวแปร max_status เพื่อเก็บหมายเลข status ที่มีจำนวน Like มากที่สุด ณ ขณะนั้น
3. การตรวจสอบกรณีที่จำนวน Like เท่ากัน
หากมีหลาย status ที่มีจำนวน Like เท่ากัน (เช่น มีจำนวน Like สูงสุดที่เหมือนกัน) โปรแกรมจะเลือกหมายเลข status ที่ ปรากฏล่าสุด ตามลำดับการป้อนข้อมูลเข้ามา:

ดังนั้นในกรณีที่จำนวน Like เท่ากันระหว่างหลาย status โปรแกรมจะเลือก status ที่พบล่าสุด (ตามลำดับที่ข้อมูลปรากฏขึ้น)
4. การเก็บผลลัพธ์
หลังจากตรวจสอบและอัปเดต max_status ทุกครั้งที่มีการป้อนข้อมูล status เข้ามา โปรแกรมจะเก็บค่า max_status ลงในตัวแปร results ซึ่งเก็บผลลัพธ์ที่ต้องการส่งออก

5. การแสดงผลลัพธ์
ในที่สุดเมื่อโปรแกรมประมวลผลข้อมูลทั้งหมดแล้ว ผลลัพธ์ที่เก็บไว้ใน results ซึ่งประกอบด้วยหมายเลข status ที่มีจำนวน Like มากที่สุดจะถูกพิมพ์ออกมา ทีละบรรทัด ตามลำดับที่มีการอัปเดต

ขั้นตอนการทำงานของโค้ดทีละบรรทัด:
รับข้อมูล:

รับค่า N (จำนวนข้อมูลการกด Like)
ใช้ cin เพื่อรับค่า status ที่มีการกด Like ทีละตัว
การเก็บข้อมูลการกด Like:

ใช้ unordered_map<long long, int> like_count เพื่อเก็บจำนวน Like ของแต่ละ status
เมื่อรับค่าจากผู้ใช้ให้เพิ่มค่าของ status ใน unordered_map โดยเพิ่มค่าตัวแปร like_count[status] ขึ้นทีละ 1
ตรวจสอบจำนวน Like สูงสุด:

เปรียบเทียบจำนวน Like ของ status ที่ได้รับล่าสุดกับ max_likes:
ถ้าจำนวน Like ของ status นี้มากกว่า max_likes ให้เปลี่ยน max_likes และอัปเดต max_status เป็น status นั้น
ถ้าจำนวน Like เท่ากับ max_likes ให้เลือก status ที่ปรากฏล่าสุด (เพราะ status ใหม่จะถูกอัปเดตให้เป็น max_status)
เก็บผลลัพธ์:

เก็บ max_status ลงใน results หลังจากตรวจสอบและอัปเดต
แสดงผลลัพธ์:

ใช้ลูป for ในการพิมพ์ค่าที่เก็บอยู่ใน results ทีละบรรทัด
ตัวอย่างการทำงาน:
Input:
คัดลอก
แก้ไข
6
1
1
2
2
3
1
ขั้นตอนการประมวลผล:
การกด Like ที่ status 1:

like_count[1] = 1
max_status = 1, max_likes = 1
ผลลัพธ์ที่เก็บ: 1
การกด Like ที่ status 1 อีกครั้ง:

like_count[1] = 2
max_status = 1, max_likes = 2
ผลลัพธ์ที่เก็บ: 1, 1
การกด Like ที่ status 2:

like_count[2] = 1
max_status = 1, max_likes = 2
ผลลัพธ์ที่เก็บ: 1, 1, 1
การกด Like ที่ status 2 อีกครั้ง:

like_count[2] = 2
max_status = 2, max_likes = 2 (เนื่องจาก status 2 มีจำนวน Like เท่ากับ status 1 แต่เป็น status ล่าสุด)
ผลลัพธ์ที่เก็บ: 1, 1, 1, 2
การกด Like ที่ status 3:

like_count[3] = 1
max_status = 2, max_likes = 2
ผลลัพธ์ที่เก็บ: 1, 1, 1, 2, 2
การกด Like ที่ status 1 อีกครั้ง:

like_count[1] = 3
max_status = 1, max_likes = 3 (เนื่องจาก status 1 มีจำนวน Like มากที่สุด)
ผลลัพธ์ที่เก็บ: 1, 1, 1, 2, 2, 1
Output:
คัดลอก
แก้ไข
1
1
1
2
2
1
สรุป:
โค้ดนี้ใช้วิธีการเก็บข้อมูลจำนวน Like โดยใช้ unordered_map และติดตาม status ที่มีจำนวน Like มากที่สุดพร้อมกับตรวจสอบการเลือก status ที่ปรากฏล่าสุดเมื่อมีจำนวน Like เท่ากัน.