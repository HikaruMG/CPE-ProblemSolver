หลักการและการทำงานของโค้ดที่เราเขียนนั้นมีหลายขั้นตอนสำคัญ เราจะใช้การค้นหาแบบ Breadth-First Search (BFS) เพื่อหาเส้นทางที่สั้นที่สุดจากจุดเริ่มต้นไปยังจุดสิ้นสุดในตาราง มาดูรายละเอียดกันครับ:

หลักการของ Breadth-First Search (BFS)
BFS คืออะไร: BFS เป็นอัลกอริธึมการค้นหาที่ใช้ในการสำรวจหรือค้นหาทุกจุดในกราฟหรือในตารางจากจุดเริ่มต้นไปยังจุดสิ้นสุด มันจะค้นหาเป็นระดับ ๆ โดยเริ่มจากระดับที่อยู่ใกล้จุดเริ่มต้นที่สุดก่อน แล้วค่อย ๆ ขยายไปยังระดับที่ไกลออกไป

คิว (Queue): BFS ใช้โครงสร้างข้อมูลคิว (Queue) ในการจัดการจุดที่ต้องการค้นหาต่อ โดยการดึงจุดที่อยู่หน้าออกจากคิวและเพิ่มจุดใหม่ที่เกิดจากการเคลื่อนที่เข้าไปในคิว
ขั้นตอนการทำงานของโค้ด

อ่านขนาดของตารางและตารางข้อมูล (Input Reading):

cpp
int N;
cin >> N;  // อ่านขนาดของตาราง
vector<vector<char>> grid(N, vector<char>(N));
for (int i = 0; i < N; ++i) {
    for (int j = 0; j < N; ++j) {
        cin >> grid[i][j];
    }
}

การตั้งค่าตัวแปรที่ใช้ในการค้นหา:
cpp
vector<vector<bool>> visited(N, vector<bool>(N, false));  // เก็บสถานะการเยี่ยมชม
queue<Point> q;  // คิวสำหรับการค้นหา
q.push({0, 0, 0});  // เริ่มต้นที่ (0, 0) ด้วยจำนวนก้าว 0
visited[0][0] = true;

การวนลูปเพื่อค้นหาเส้นทาง:
cpp
while (!q.empty()) {
    Point current = q.front();
    q.pop();

    // ถ้าถึงจุดสิ้นสุด ให้คืนค่าจำนวนก้าว
    if (current.x == N - 1 && current.y == N - 1) {
        return current.steps;
    }

    // ตรวจสอบการเคลื่อนที่ที่เป็นไปได้ทั้งหมด
    for (const auto& move : moves) {
        int newX = current.x + move.x;
        int newY = current.y + move.y;

        // ถ้าการเคลื่อนที่ถูกต้องและยังไม่เคยเยี่ยมชม ให้เพิ่มเข้าไปในคิว
        if (isValidMove(newX, newY, N, grid) && !visited[newX][newY]) {
            q.push({newX, newY, current.steps + move.steps});
            visited[newX][newY] = true;
        }
    }
}

ฟังก์ชันตรวจสอบการเคลื่อนที่ที่ถูกต้อง:
cpp
bool isValidMove(int x, int y, int N, vector<vector<char>>& grid) {
    return (x >= 0 && x < N && y >= 0 && y < N && grid[x][y] == '.');
}

การทำงานโดยรวม
เริ่มต้นที่ตำแหน่ง (0, 0) ด้วยจำนวนก้าว 0 และเพิ่มเข้าไปในคิว

วนลูปคิวเพื่อตรวจสอบการเคลื่อนที่ที่เป็นไปได้ทั้งหมดและบันทึกจำนวนก้าวที่ใช้

ถ้าพบจุดที่เป็นเป้าหมาย (N-1, N-1) ให้คืนค่าจำนวนก้าวที่ใช้

ถ้าไม่มีเส้นทางให้คืนค่า -1 เพื่อบอกว่าไม่มีเส้นทาง