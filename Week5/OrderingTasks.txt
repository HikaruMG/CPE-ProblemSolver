หลักการคิดและการทำงานของโค้ด:
โค้ดนี้ใช้ Kahn's Algorithm เพื่อทำการ จัดเรียงแบบท็อปโพลอจิคัล (Topological Sorting) ของกราฟที่มีทิศทาง ซึ่งมักใช้ในการแก้ปัญหาที่มีการจัดลำดับงานที่มีข้อกำหนด (Precedence Constraints) เช่น ในปัญหานี้ งานต่างๆ ที่มีความสัมพันธ์ซึ่งต้องทำให้เสร็จล่วงหน้าก่อนงานอื่น ๆ

ขั้นตอนการทำงาน:
การแทนกราฟและการนับ In-degree:

งานต่างๆ ถูกแทนด้วย โหนด (nodes) ในกราฟที่มีทิศทาง (directed graph) และความสัมพันธ์ระหว่างงานถูกแทนด้วย ขอบ (edges) ที่มีทิศทาง
In-degree คือจำนวนขอบที่เข้าหางานหนึ่ง ซึ่งหมายความว่ามีงานใดบ้างที่ต้องทำเสร็จก่อนหน้านี้
ตัวอย่าง: ถ้างาน 1 ต้องทำก่อนงาน 2, ดังนั้น 2 จะมี In-degree เป็น 1 และ 1 จะมี In-degree เป็น 0 (สามารถทำได้ทันที)
การอ่านข้อมูล:

ข้อมูลนำเข้ามีหลายชุด (แต่ละชุดประกอบด้วยจำนวนงาน n และจำนวนความสัมพันธ์ m)
สำหรับแต่ละชุด เราจะอ่านข้อมูลความสัมพันธ์ (i, j) ซึ่งบอกว่า งาน i ต้องทำก่อนงาน j จากนั้นเราจะสร้างกราฟที่มีทิศทางและคำนวณค่า In-degree ของแต่ละงาน
การเริ่มต้นกับงานที่ไม่มีความสัมพันธ์:

งานที่มี In-degree เป็น 0 คือ งานที่สามารถเริ่มทำได้ทันที เพราะไม่มีงานใดต้องทำก่อนหน้านี้
เราจะเก็บงานเหล่านี้ไว้ใน คิว (Queue) และเริ่มทำการประมวลผลจากงานเหล่านี้
การทำงานผ่านคิว:

เราจะใช้คิวในการประมวลผลงานที่สามารถทำได้ (มี In-degree เป็น 0) โดยเริ่มจากงานที่มี In-degree เป็น 0 และนำงานเหล่านั้นออกจากคิว
เมื่อเรานำงานออกจากคิวแล้ว เราจะไปลดค่า In-degree ของงานที่ต้องขึ้นอยู่กับงานที่เราทำเสร็จไปแล้ว
ถ้าค่า In-degree ของงานที่ต้องการลดลงเป็น 0 ก็จะหมายความว่างานนั้นสามารถทำได้ทันที ดังนั้นเราจะเพิ่มงานนั้นลงในคิว
ทำขั้นตอนนี้ไปเรื่อยๆ จนกว่างานทั้งหมดจะได้รับการประมวลผล
ผลลัพธ์:

เมื่อเราทำงานครบทั้งหมดแล้ว, ลำดับงานที่ออกจากคิวจะเป็นลำดับการทำงานที่ถูกต้อง ซึ่งเป็น การจัดเรียงแบบท็อปโพลอจิคัล (Topological Sort)

การทำงานของโค้ด:
การรับข้อมูล:

โค้ดจะรับข้อมูลชุดแรกเป็น n (จำนวนงาน) และ m (จำนวนความสัมพันธ์)
ถ้า n = 0 และ m = 0 จะหยุดการทำงาน
สำหรับแต่ละชุดของข้อมูล จะสร้างกราฟที่แทนความสัมพันธ์ของการทำงาน
การสร้างกราฟ:

ใช้ แอดจาเซนซีลิสต์ (Adjacency List) สำหรับการเก็บข้อมูลกราฟ
คำนวณ In-degree ของแต่ละงาน ซึ่งใช้ในการระบุว่ามีงานใดบ้างที่ต้องทำก่อนงานนี้
การใช้คิว:

ใช้ คิว (Queue) ในการจัดการงานที่มี In-degree เป็น 0 และจัดการตามลำดับงานที่สามารถทำได้
เมื่องานใดเสร็จแล้ว (ถูกนำออกจากคิว) จะลดค่า In-degree ของงานที่ขึ้นอยู่กับงานนั้น
ผลลัพธ์:

พิมพ์ลำดับการทำงานที่ถูกจัดเรียงตามลำดับที่ถูกต้องตามเงื่อนไขของปัญหา