โค้ดนี้เป็นโปรแกรมที่ใช้ในการนับจำนวนการเกิดขึ้นของ substring S ภายใน string T โดยการใช้การวนลูปเพื่อค้นหาความตรงกันของตัวอักษรทีละตัวใน T กับ S และตรวจสอบว่ามีการจับคู่กับ substring ทั้งหมดใน S หรือไม่

การทำงานของโค้ด:
ฟังก์ชัน FindName:

รับพารามิเตอร์เป็น string S (substring ที่ต้องการค้นหา) และ string T (ข้อความที่ต้องการค้นหาในนั้น)
ใช้ตัวแปร count ในการเก็บจำนวนครั้งที่ substring S ปรากฏใน T
ใช้ตัวแปร Cur_idx เพื่อติดตามตำแหน่งปัจจุบันของตัวอักษรใน S ที่กำลังค้นหา
การวนลูปใน string T:

สำหรับแต่ละตัวอักษรใน T, ถ้าตัวอักษรนั้นตรงกับตัวอักษรใน S ที่ Cur_idx ชี้อยู่, จะเพิ่ม Cur_idx ไปยังตำแหน่งถัดไปใน S
ถ้า Cur_idx ถึงขนาดของ S หมายความว่าเราเจอ substring S ใน T, ดังนั้น:
เพิ่มค่าตัวแปร count เพื่อบันทึกจำนวนครั้งที่เจอ substring
รีเซ็ต Cur_idx กลับไปที่ 0 เพื่อเริ่มการค้นหาครั้งถัดไป
ถ้าไม่ตรงกัน, จะไม่ทำการเพิ่ม Cur_idx และจะดำเนินการค้นหาต่อไป
ฟังก์ชัน main:

รับค่าจากผู้ใช้เป็น string S และ T
เรียกใช้ฟังก์ชัน FindName เพื่อค้นหาจำนวนครั้งที่ S ปรากฏใน T
แสดงผลลัพธ์ที่ได้
ตัวอย่างการทำงาน:
สมมุติว่าเราให้ S = "ab" และ T = "abcab", โปรแกรมจะทำการค้นหา substring "ab" ใน string "abcab":

เริ่มต้นจากตำแหน่ง 0 ใน T และพบว่า "ab" ตรงกับ substring ใน T ที่ตำแหน่ง 0-1, ดังนั้น count จะเพิ่มเป็น 1 และ Cur_idx จะรีเซ็ตกลับไปที่ 0
ค้นหาต่อจากตำแหน่ง 2 ใน T และพบว่า "ab" ตรงกับ substring ใน T ที่ตำแหน่ง 3-4, ดังนั้น count จะเพิ่มเป็น 2 และ Cur_idx จะรีเซ็ตกลับไปที่ 0
ผลลัพธ์ที่ได้คือ 2 เนื่องจาก "ab" ปรากฏใน T 2 ครั้ง

ข้อสังเกต:
การทำงานของโค้ดจะเป็นการวนลูปผ่านตัวอักษรใน T ทีละตัว และใช้ Cur_idx เพื่อติดตามตำแหน่งใน S เพื่อให้แน่ใจว่า substring S จะตรงกับ T ทั้งหมด
ถ้าหาก S ปรากฏใน T หลายครั้ง (เช่นในกรณีที่ S เป็น substring ที่สามารถทับซ้อนกันได้ใน T), โค้ดจะนับทุกครั้งที่ S ปรากฏ
ตัวอย่างอินพุตและผลลัพธ์:
อินพุต:

คัดลอก
แก้ไข
ab
abcab
ผลลัพธ์:

คัดลอก
แก้ไข
2