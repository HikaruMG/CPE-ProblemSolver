โค้ดนี้ตรวจสอบว่า กราฟที่ได้รับการป้อนเข้ามาเป็นกราฟสองชุด (Bipartite Graph) หรือไม่ โดยใช้การค้นหาแบบ BFS (Breadth-First Search) เพื่อทำการไล่สีของแต่ละโหนดในกราฟและตรวจสอบว่าไม่มีโหนดใดๆ ที่มีสีเดียวกันกับโหนดที่เชื่อมต่อกันโดยตรง

ขั้นตอนของโค้ด:
ประกาศฟังก์ชัน checkBi:

รับค่า n (จำนวนโหนดในกราฟ) และ adj (รายการเชื่อมโยงหรือ adjacency list ของกราฟ) เป็นอาร์กิวเมนต์
สร้างตัวแปร visited ซึ่งเป็นเวกเตอร์ขนาด n+1 เพื่อเก็บสีของโหนดแต่ละตัว (เริ่มต้นที่ -1 หมายถึงยังไม่ได้ทำการสี)
เริ่มต้นการตรวจสอบแต่ละโหนด:

ใช้ลูป for เพื่อวนลูปผ่านโหนดทุกตัวจาก 1 ถึง n และตรวจสอบว่าโหนดนั้นได้รับการสีหรือยัง
ถ้าโหนดยังไม่ได้รับการสี (visited[i] == -1), จะเริ่มต้น BFS จากโหนดนั้น
การค้นหาแบบ BFS:

ใช้คิว (queue<int> q) เพื่อเก็บโหนดที่ต้องการจะตรวจสอบ
กำหนดสีเริ่มต้นให้กับโหนดที่เริ่มต้นเป็น 0 และเพิ่มโหนดนี้เข้าไปในคิว
จากนั้นจะทำการลูปจนกว่าคิวจะว่าง:
ดึงโหนดปัจจุบันออกจากคิว
ตรวจสอบเพื่อนบ้าน (neighbor) ของโหนดปัจจุบัน
ถ้าเพื่อนบ้านยังไม่ได้รับการสี, จะกำหนดสีให้ตรงข้ามกับโหนดปัจจุบันและเพิ่มเพื่อนบ้านเข้าไปในคิว
ถ้าเพื่อนบ้านมีสีเดียวกันกับโหนดปัจจุบัน, จะกลับคืนค่า false เพราะแสดงว่าเป็นกราฟที่ไม่เป็น bipartite
การคืนค่าผลลัพธ์:

ถ้าผ่านการตรวจสอบทั้งหมดโดยไม่พบโหนดที่มีสีเหมือนกันกับโหนดที่เชื่อมต่อกัน, จะคืนค่า true แสดงว่ากราฟเป็น bipartite
ใน main:

อ่านจำนวนกรณีทดสอบ (k)
สำหรับแต่ละกรณีทดสอบ:
อ่านจำนวนโหนดและจำนวนขอบ
สร้างรายการเชื่อมโยง (adj) สำหรับกราฟ
อ่านขอบและอัปเดตรายการเชื่อมโยง
ตรวจสอบว่ากราฟเป็น bipartite หรือไม่โดยเรียกใช้ฟังก์ชัน checkBi
แสดงผลลัพธ์ว่าเป็น "yes" หรือ "no" ขึ้นอยู่กับผลการตรวจสอบ
ตัวอย่างการทำงาน:
สมมุติว่าเรามีกราฟที่มี 4 โหนดและ 4 ขอบ:

คัดลอก
แก้ไข
1 - 2
2 - 3
3 - 4
4 - 1
โค้ดจะทำการไล่สีโหนดโดยเริ่มจากโหนด 1 และตรวจสอบว่าไม่มีโหนดใดๆ ที่มีสีเดียวกันกับโหนดที่เชื่อมต่อกันโดยตรง (สีจะสลับกันไปตามลำดับ 0, 1, 0, 1). ถ้าผ่านการตรวจสอบนี้, ผลลัพธ์ที่ได้จะเป็น "yes" เนื่องจากกราฟนี้เป็น bipartite.

การทำงานของ BFS:
เริ่มจากโหนดที่ยังไม่ได้รับการสี (เช่น โหนด 1), กำหนดสี 0 ให้กับโหนดนั้น
เชื่อมโยงไปยังเพื่อนบ้านของโหนดนั้น (เช่น โหนด 2), กำหนดสี 1 ให้กับโหนด 2
จากนั้นเชื่อมโยงไปยังเพื่อนบ้านของโหนด 2 (เช่น โหนด 3), กำหนดสี 0 ให้กับโหนด 3
ทำซ้ำกระบวนการนี้จนกระทั่งครบทุกโหนดหรือพบว่าโหนดใดมีสีเดียวกันกับโหนดที่เชื่อมต่อกัน, ถ้าพบจะคืนค่า false ทันที
ข้อสังเกต:
กราฟที่เป็น bipartite สามารถแสดงในรูปของสองชุดที่ไม่มีการเชื่อมโยงระหว่างโหนดในชุดเดียวกัน