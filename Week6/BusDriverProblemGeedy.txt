วิธีคิดในการแก้ปัญหา:
ปัญหานี้เกี่ยวข้องกับการจัดสรรเส้นทางรถบัสเช้าและบัสเย็นให้กับคนขับรถ เพื่อให้ค่าล่วงเวลาน้อยที่สุด โดยมีข้อกำหนดว่า ถ้ารวมระยะทางทั้งวันของคนขับเกินกว่าค่าที่กำหนด (d) จะต้องจ่ายเงินล่วงเวลาในอัตรา (r) ต่อชั่วโมงที่เกินมา

ขั้นตอนในการคิด:

1. การรับข้อมูล:
   - รับจำนวนคนขับ (n), ระยะทางสูงสุดที่ไม่ต้องจ่ายล่วงเวลา (d), และอัตราค่าล่วงเวลา (r).
   - รับข้อมูลเส้นทางรถบัสเช้าและเย็นเป็นลิสต์.

2. การคำนวณค่าล่วงเวลา:
   - ค่าล่วงเวลาจะเกิดขึ้นเมื่อรวมระยะทางของเส้นทางเช้าและเย็นเกินกว่า d (ระยะทางที่ไม่ต้องจ่ายล่วงเวลา).
   - ค่าล่วงเวลาคำนวณจากส่วนเกินของระยะทางที่เกิน d คูณด้วยอัตรา r.

3. การจับคู่เส้นทาง:
   - หากเราเลือกจับคู่เส้นทางที่ไม่เหมาะสม เช่น จับคู่เส้นทางเช้าที่ยาวกับเส้นทางเย็นที่ยาว อาจทำให้รวมระยะทางเกิน d มากเกินไป ดังนั้น เราควรจับคู่เส้นทางที่สั้นที่สุดกับเส้นทางที่สั้นที่สุดเพื่อให้ค่าล่วงเวลาน้อยที่สุด
   - การเรียงลำดับเส้นทางเช้าและเย็นในลำดับจากสั้นไปยาวจะช่วยให้เราได้ผลลัพธ์ที่ดีที่สุดในการลดค่าล่วงเวลา

4. การคำนวณค่าล่วงเวลาโดยรวม:
   - เมื่อเราจับคู่เส้นทางเช้าและเย็นที่เรียงลำดับแล้ว เราจะคำนวณรวมระยะทางของแต่ละคนขับ หากเกิน d จะคำนวณค่าล่วงเวลาและสะสมผลลัพธ์

อธิบายโค้ด:

1. รับข้อมูล:
   - ใช้ `cin >> n >> d >> r` เพื่อรับจำนวนคนขับ (n), ระยะทางสูงสุดที่ไม่ต้องจ่ายล่วงเวลา (d), และอัตราค่าล่วงเวลา (r).
   - จากนั้นรับข้อมูลเส้นทางรถบัสเช้าและเย็น โดยใช้ลูป `for` เพื่อเก็บค่าลงในเวกเตอร์ `morning` และ `evening`.

2. การจัดเรียงเส้นทาง:
   - ใช้ฟังก์ชัน `sort()` เพื่อเรียงลำดับเส้นทางเช้า (`morning`) และเย็น (`evening`) จากน้อยไปหามาก เพื่อให้จับคู่เส้นทางที่สั้นที่สุดกับเส้นทางที่สั้นที่สุด ซึ่งจะช่วยลดโอกาสที่รวมระยะทางจะเกิน d.

3. คำนวณค่าล่วงเวลา:
   - ในลูป `for` ตรวจสอบสำหรับแต่ละคนขับว่า รวมระยะทางจากเส้นทางเช้าและเย็นเกิน d หรือไม่ หากเกิน คำนวณค่าล่วงเวลาโดยใช้สูตร `(totalLength - d) * r` และสะสมผลลัพธ์ในตัวแปร `totalOvertime`.

4. การหยุดการทำงาน:
   - ถ้าค่า `n, d, r` เป็น 0 หมายความว่าไม่มีข้อมูลอีกแล้ว ให้หยุดการทำงานโดยใช้ `break`.

ตัวอย่างการทำงาน:

Input:
```
2 20 5
10 15
10 15
2 20 5
10 10
10 10
0 0 0
```

Output:
```
50
0
```

ในกรณีแรก ค่า `totalLength` สำหรับคนขับแต่ละคนเกิน 20 ดังนั้นจึงต้องจ่ายค่าล่วงเวลา 50 บาท
ในกรณีที่สอง ค่า `totalLength` ไม่เกิน 20 ดังนั้นไม่มีค่าล่วงเวลา

สรุป:
โค้ดนี้ใช้วิธีการจับคู่เส้นทางที่เรียงลำดับแล้วเพื่อให้ค่าล่วงเวลาน้อยที่สุด และคำนวณค่าล่วงเวลาโดยตรงหากรวมระยะทางเกินขีดจำกัดที่กำหนด