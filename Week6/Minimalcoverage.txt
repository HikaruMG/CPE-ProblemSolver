ปัญหานี้เป็นปัญหาที่ต้องเลือกช่วงของเส้นที่ให้มาหลายๆ ช่วง เพื่อให้สามารถปิดคลุมช่วง [0, M] โดยใช้จำนวนช่วงน้อยที่สุด หากไม่สามารถปิดคลุมได้ จะต้องแสดงผลเป็น 0

เพื่อหาคำตอบที่มีประสิทธิภาพสูงสุด เราสามารถใช้กลยุทธ์ Greedy (วิธีเลือกที่ดีที่สุดในแต่ละขั้นตอน) โดยมีขั้นตอนหลักๆ ดังนี้:

1. จัดเรียงช่วงเส้น:
    - เริ่มต้นด้วยการจัดเรียงช่วงเส้นที่ให้มาจากซ้ายไปขวา (ตามตำแหน่งของจุดเริ่มต้น Li ของแต่ละช่วง)

2. เลือกช่วงเส้นที่ดีที่สุด:
    - เริ่มจากการครอบคลุมจากจุด 0 และเลือกช่วงที่ขยายการครอบคลุมไปไกลที่สุด (จากการเลือกช่วงที่เริ่มต้นที่ตำแหน่งก่อนหน้าและสิ้นสุดที่ไกลที่สุด)
    - เลือกช่วงที่สามารถขยายการครอบคลุมไปได้มากที่สุดที่เริ่มต้นก่อนหรือที่ตำแหน่งปัจจุบัน
    - ทำเช่นนี้จนกว่าจะครอบคลุมช่วง [0, M] หรือจนกว่าจะแสดงว่าทำไม่ได้

3. ตรวจสอบความสำเร็จ:
    - หากครอบคลุม [0, M] ได้ เราจะพิมพ์จำนวนช่วงที่เลือกออกมาและแสดงช่วงที่เลือก
    - หากไม่สามารถครอบคลุมได้ ก็จะพิมพ์ 0

คำอธิบายโค้ด:

1. การอ่านข้อมูล:
    - อ่านจำนวน test case t จากนั้นทำการข้ามบรรทัดว่าง (ใช้ cin.ignore() เพื่อข้ามบรรทัดหลังจากอ่าน t)
    - สำหรับแต่ละ test case เราจะอ่านค่า M (จุดสิ้นสุดของช่วงที่ต้องการครอบคลุม) และอ่านช่วงเส้นจนกว่าจะเจอ "0 0" ซึ่งเป็นตัวบ่งชี้ว่าไม่มีข้อมูลเพิ่มเติม

2. การจัดเรียงช่วงเส้น:
    - ใช้ฟังก์ชัน sort() เพื่อจัดเรียงช่วงเส้นตามตำแหน่ง left ของแต่ละช่วง (จุดเริ่มต้นของช่วง)

3. การเลือกช่วงเส้นโดยใช้กลยุทธ์ Greedy:
    - เริ่มต้นจากการครอบคลุมที่ currentCover = 0 และใช้ลูปเพื่อเลือกช่วงเส้นที่ขยายการครอบคลุมไปได้ไกลที่สุด
    - ในแต่ละรอบของลูป จะพยายามเลือกช่วงเส้นที่มี left <= currentCover และขยายการครอบคลุมไปถึง right ที่ไกลที่สุด
    - หากไม่สามารถหาช่วงเส้นที่ขยายการครอบคลุมได้ จะหยุดและแสดงว่าไม่สามารถครอบคลุมช่วง [0, M] ได้

4. การแสดงผล:
    - หากครอบคลุมช่วง [0, M] ได้ จะพิมพ์จำนวนช่วงที่เลือกและช่วงเส้นที่เลือก
    - หากไม่สามารถครอบคลุมได้ จะพิมพ์ 0

การจัดการบรรทัดว่าง:
    - ระหว่าง test case จะมีบรรทัดว่าง (นอกจากกรณีที่ไม่มีผลลัพธ์)

ตัวอย่างการทำงาน:

Input:
```
2

1
-1 0
-5 -3
2 5
0 0

1
-1 0
0 1
0 0
```

Output:
```
0

1
0 1
```

อธิบายการทำงาน:

กรณีแรก:
- เรามีช่วงเส้นสองช่วง: [-1, 0] และ [-5, -3] แต่ไม่มีช่วงไหนที่สามารถครอบคลุมช่วง [0, 1] ได้เลย ดังนั้นผลลัพธ์คือ 0

กรณีที่สอง:
- ช่วงเส้น [-1, 0] และ [0, 1] สามารถครอบคลุมช่วง [0, 1] ได้พอดี ดังนั้นผลลัพธ์คือ 1 ช่วง และช่วงที่เลือกคือ [0, 1]

ความซับซ้อนของเวลา:
- การจัดเรียงช่วงเส้นใช้เวลา O(n log n) ซึ่ง n คือจำนวนช่วงเส้นในแต่ละ test case
- การเลือกช่วงเส้นโดยใช้กลยุทธ์ Greedy ใช้เวลา O(n)
- ดังนั้น ความซับซ้อนของเวลาในแต่ละ test case คือ O(n log n)