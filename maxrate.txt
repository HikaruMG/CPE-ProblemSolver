โค้ดนี้เป็นโปรแกรมที่คำนวณ "maximum penalty" จากการทำงานของงานหลายๆ งานที่มีเวลาสิ้นสุดที่กำหนด (deadlines) และระยะเวลาในการทำงาน (times) โดยหากงานเสร็จหลังจากกำหนดเวลาสิ้นสุดไปแล้วจะมีค่าปรับที่เพิ่มขึ้นตามเวลาเกิน

การทำงานของโค้ด:
โครงสร้าง Job:

ใช้เพื่อเก็บข้อมูลของงานแต่ละงาน โดยมีสองสมาชิก:
Di: เวลาสิ้นสุด (deadline) ของงาน
Ti: ระยะเวลาที่ใช้ในการทำงาน
ฟังก์ชัน compare:

ฟังก์ชันนี้ใช้ในการจัดเรียงงานตาม Di (เวลาสิ้นสุด) โดยจะเรียงงานจากเวลาสิ้นสุดที่น้อยที่สุดไปมากที่สุด
ฟังก์ชัน main:

อ่านจำนวนงาน N จากอินพุต
อ่านข้อมูลของงานทั้งหมด และเก็บไว้ใน vector<Job>
ใช้ฟังก์ชัน sort เพื่อจัดเรียงงานตาม Di
กำหนดตัวแปร current_time สำหรับติดตามเวลาที่ใช้ไปจนถึงตอนนี้
กำหนดตัวแปร max_penalty เพื่อเก็บค่าปรับสูงสุดที่เกิดขึ้น
สำหรับแต่ละงาน:
เพิ่มระยะเวลาในการทำงานของงานนั้นเข้าไปใน current_time
หาก current_time เกิน Di + 10 (คือเลยเวลาสิ้นสุดและมีการเกิน 10 หน่วยเวลา), จะคำนวณค่าปรับตามเวลาที่เกิน
ค่าปรับจะคำนวณจาก (current_time - Di - 10) * 1000
คำนวณค่าปรับสูงสุดที่เกิดขึ้นในระหว่างการทำงานของทุกงาน
ผลลัพธ์:

หลังจากการคำนวณเสร็จสิ้น จะแสดงผลค่าปรับสูงสุดที่เกิดขึ้นจากการทำงานของงานทั้งหมด
ตัวอย่างการทำงาน:
อินพุต:

คัดลอก
แก้ไข
3
5 3
8 2
12 4
งานแรกมี Di = 5 และ Ti = 3 (ต้องใช้เวลา 3 หน่วย)
งานที่สองมี Di = 8 และ Ti = 2 (ต้องใช้เวลา 2 หน่วย)
งานที่สามมี Di = 12 และ Ti = 4 (ต้องใช้เวลา 4 หน่วย)
การทำงาน:

เริ่มต้นที่ current_time = 0 และ max_penalty = 0
หลังจากทำงานแรกเสร็จ: current_time = 3, ไม่มีการเกินเวลา
หลังจากทำงานที่สองเสร็จ: current_time = 5, ไม่มีการเกินเวลา
หลังจากทำงานที่สามเสร็จ: current_time = 9, ซึ่งเกิน Di = 12 ของงานที่สามไปแล้ว (เกินเวลา 7 หน่วย)
ค่าปรับสำหรับงานที่สามจะเป็น (9 - 12 - 10) * 1000 = 0, ไม่มีการเกินเวลาที่เกินมาก
ผลลัพธ์:

คัดลอก
แก้ไข
0
ข้อสังเกต:
โปรแกรมจะคำนวณค่าปรับเมื่อเวลาที่ใช้ในการทำงานเกินเวลาสิ้นสุด Di และต้องเกิน 10 หน่วยเวลา (ตามข้อกำหนดในโจทย์)
ค่าปรับจะคำนวณเป็น 1000 * (เวลาที่เกิน)
โปรแกรมนี้ทำงานได้ดีในการจัดการกับการคำนวณค่าปรับจากการทำงานเกินเวลาที่กำหนด